using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using LuzmaShopAPI.Data;
using LuzmaShopAPI.Models;
using Microsoft.VisualBasic;

namespace LuzmaShopAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class OrdersController : ControllerBase
    {
        private readonly LuzmaShopAPIContext _context;

        public OrdersController(LuzmaShopAPIContext context)
        {
            _context = context;
        }

        // POST: api/Order/InsertOrder
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost("InsertOrder")]
        public async Task<IActionResult> InsertOrder(Order order)
        {
            var cart = await _context.Cart.Where(c => c.Ordered == false && c.User.Id == order.User.Id).FirstOrDefaultAsync();
            var user = await _context.User.Where(u => u.Id == order.User.Id).FirstOrDefaultAsync();
            var usercart = new UserCart();
            var payment = await _context.Payment.Where(p => p.Id == order.Payment.Id).FirstOrDefaultAsync();
            List<UserCartItem> superusercartitems = [];

            foreach (var item in order.UserCart.CartItems)
            {
                var usercartitems = new UserCartItem();
                var product = await _context.Product.Where(p => p.Id == item.Product.Id).FirstOrDefaultAsync();
                if (product != null)
                {
                    usercartitems.Product = product;
                }
                _context.UserCartItem.Add(usercartitems);
                await _context.SaveChangesAsync();

                var usercartitem = await _context.UserCartItem.OrderBy(uc => uc.Id).LastOrDefaultAsync();
 
                if (usercartitem != null)
                {
                    superusercartitems.Add(usercartitem);
                }
            }

            if (cart == null || user == null)
            {
                return BadRequest("No active cart found for the user");
            }
            else if (payment == null)
            {
                return BadRequest("No payment found");
            }

            usercart.CartItems = superusercartitems;
            usercart.User = user;
            usercart.Ordered = true;
            usercart.OrderedOn = DateTime.UtcNow.ToString();

            _context.UserCart.Add(usercart);
            await _context.SaveChangesAsync();

            var usercartsupreme = await _context.UserCart.OrderBy(ucs => ucs.Id).LastOrDefaultAsync();
            if (usercartsupreme != null)
            {
                order.UserCart = usercartsupreme;
            }
            order.User = user;
            order.Payment = payment;
            order.CreatedAt = DateTime.UtcNow.ToString();
            _context.Order.Add(order);
            await _context.SaveChangesAsync();

            cart.Ordered = true;
            cart.OrderedOn = DateTime.UtcNow.ToString();
            await _context.SaveChangesAsync();

            // Now that the payment has been saved and the ID has been generated by the database,
            // retrieve the payment ID
            return Ok(order.Id);
        }

        // GET: api/Orders
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Order>>> GetOrder()
        {
            return await _context.Order.ToListAsync();
        }

        // GET: api/Orders/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Order>> GetOrder(int id)
        {
            var order = await _context.Order.FindAsync(id);

            if (order == null)
            {
                return NotFound();
            }

            return order;
        }

        // PUT: api/Orders/5
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPut("{id}")]
        public async Task<IActionResult> PutOrder(int id, Order order)
        {
            if (id != order.Id)
            {
                return BadRequest();
            }

            _context.Entry(order).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!OrderExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/Orders
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost]
        public async Task<ActionResult<Order>> PostOrder(Order order)
        {
            _context.Order.Add(order);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetOrder", new { id = order.Id }, order);
        }

        // DELETE: api/Orders/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteOrder(int id)
        {
            var order = await _context.Order.FindAsync(id);
            if (order == null)
            {
                return NotFound();
            }

            _context.Order.Remove(order);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool OrderExists(int id)
        {
            return _context.Order.Any(e => e.Id == id);
        }
    }
}
